{
  "version": 3,
  "sources": [
    "src/Adapter.coffee"
  ],
  "names": [],
  "mappings": ";AAAa,CAAA,YAAA;AAAA;AAAA,MAAA,UAAA;AAEP,EAAA,UAAA,GAAN,MAAA,UAAA,CAAA;AACE,IAAA,WAAa,GAAA;AACX,WAAA,KAAA,GAAa,EAAb;AACA,WAAA,IAAA,GACE;AAAA,6BAAqB;AAArB,OADF;AAEA;AAJJ;;;;;;;;;AAYE,IAAA,SAAW,CAAA,QAAA,EAAA;;AAET,UAAG,QAAQ,CAAR,KAAA,CAAH,YAAG,CAAH,EAAA;AACE,eAAO,QAAQ,CAAR,gBAAA,CADT,KACS,CAAP;AAFN,OADa,C;;;;AAOT,UAAG,OAAA,QAAA,KAAH,QAAA,EAAA;AACE,eAAO,CADT,QACS,CAAP,CADF,C;AAAA,OAAA,MAGK,IAAG,QAAQ,CAAR,MAAA,CAAA,CAAA,MAAH,GAAA,EAAA;AACH,QAAA,QAAA,GAAW,QAAQ,CAAR,SAAA,CAAA,CAAA,CAAX;AACA,eAAO,CAAC,QAAQ,CAAR,cAAA,CAFL,QAEK,CAAD,CAAP,CAFG,C;AAAA,OAAA,MAIA,IAAG,QAAQ,CAAR,MAAA,CAAA,CAAA,MAAH,GAAA,EAAA;AACH,QAAA,QAAA,GAAW,QAAQ,CAAR,SAAA,CAAA,CAAA,CAAX;AACA,eAAO,QAAQ,CAAR,sBAAA,CAFJ,QAEI,CAAP,CAFG,C;AAAA,OAAA,MAIA,IAAG,OAAA,QAAA,KAAH,QAAA,EAAA;AACH,eAAO,QAAQ,CAAR,oBAAA,CADJ,QACI,CAAP;;AA/BN;;;;;;;;;AAuCE,IAAA,QAAU,CAAA,IAAA,EAAA,KAAA,EAAA;aACR,KAAK,KAAL,CAAA,IAAA,IAAmB,K;AAxCvB;;;;;;;;AA+CE,IAAA,IAAM,CAAA,IAAA,EAAA;AACR,UAAA,SAAA,EAAA,aAAA;AAAI,MAAA,aAAA,GAAgB,KAAA,SAAA,CAAe,IAAI,CAAnB,iBAAA,CAAhB;AACA,MAAA,SAAA,GAAY,KAAA,SAAA,CAAe,KAAK,KAAL,CAAf,IAAe,CAAf,EAAgC,CAAhC,CAAZ;AAEA,MAAA,aAAa,CAAb,OAAA,CAAsB,UAAA,EAAA,EAAA,GAAA,EAAA;AAC1B,YAAA,IAAA;AAAM,QAAA,IAAA,GAAO,aAAa,CAAA,GAAA,CAApB;eACA,IAAI,CAAC,KAAL,CAAA,OAAA,GAAqB,M;AAFvB,OAAA;aAKA,SAAS,CAAC,KAAV,CAAA,OAAA,GAA0B,O;AATtB;;AAhDR,GAAM;AA2DN,EAAA,MAAM,CAAN,OAAA,GAAiB,UAAjB;CA7Da,E,IAAA,C,IAAA",
  "sourcesContent": [
    "# spa adapter\n\nclass SpaAdapter\n  constructor: () ->\n    this.pages = {};\n    this.meta =\n      'containerSelector': '.spa-container'\n    this\n\n  ###\n  Get nodes by selector\n  @param {string} selector\n  @returns {object} NodeList\n  ###\n  # TODO: Should be moved to general utils module\n  _getNodes: (selector) ->\n    # try to use query selector all on slctr with attribute\n    if selector.match(/^.+\\[.+\\]$/)\n      return document.querySelectorAll(slctr)\n\n    # default - use standard selector statements\n    # node\n    if typeof selector == 'object'\n      return [selector]\n    # id\n    else if selector.charAt(0) == '#'\n      selector = selector.substring(1)\n      return [document.getElementById(selector)]\n    # class\n    else if selector.charAt(0) == '.'\n      selector = selector.substring(1)\n      return document.getElementsByClassName(selector)\n    # tag\n    else if typeof selector == 'string'\n      return document.getElementsByTagName(selector)\n\n  ###\n  Register a spa container\n  @param {string} name\n  @param {string} slctr\n  @returns {*}\n  ###\n  register: (name, slctr) ->\n    this.pages[name] = slctr\n\n  ###\n  Go to given page\n  @param {string} name\n  @returns {*}\n  ###\n  goto: (name) ->\n    spaContainers = this._getNodes(meta.containerSelector)\n    container = this._getNodes(this.pages[name])[0]\n\n    spaContainers.forEach((el, idx) ->\n      cont = spaContainers[idx]\n      cont.style.display = 'none'\n    )\n\n    container.style.display = 'block'\n\nmodule.exports = SpaAdapter\n"
  ],
  "sourceRoot": ".."
}